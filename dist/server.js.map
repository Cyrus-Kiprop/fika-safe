{"version":3,"sources":["../server/server.js"],"names":["require","mongooseUniqueValidator","ObjectId","ObjectID","sourceMapSupport","install","express","bodyParser","app","use","qpm","mongodb","processQuery","autoDetect","fieldPattern","dataType","converters","objectId","json","post","req","res","new_rider","Rider","body","save","then","rider","console","log","message","status","error","send","new_sacco","Sacco","sacco","err","get","find","riders_id","params","id","findById","_id","create","result","insertedId","added_rider","put","findByIdAndUpdate","updated_rider","findByIdAndRemove","mongoose","connect","useNewUrlParser","listen","stack"],"mappings":"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","sourcesContent":["import sourceMapSupport from 'source-map-support'\n// import queryString from 'query-String'\nimport { MongoClient } from 'mongodb';\nimport mongoose from \"mongoose\";\nimport { Schema } from \"mongoose\";\nrequire(\"babel-polyfill\");\n\n\n\n// UNIQUE VALIDATOR\nconst mongooseUniqueValidator = require('mongoose-unique-validator');\n\nconst ObjectId = require('mongodb').ObjectID;\n\nsourceMapSupport.install()\n\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\n// an instance of express\nconst app = express();\n\n// mounting other middlewares into our server.js\napp.use(express.static('static'));\n\n\nvar qpm = require('query-params-mongo');\nvar mongodb = require('mongodb');\n\nvar processQuery = qpm({\n    autoDetect: [{ fieldPattern: /_id$/, dataType: 'objectId' }],\n    converters: { objectId: mongodb.ObjectID }\n});\n\n\n\n\napp.use(bodyParser.json());\n\n// mongoose models\nimport { Sacco, Rider } from './db.models.js'\n// OUR SERVER CODE WILL GO HERE\n\n// BASIC CRUD APIS\napp.post(`/api/riders`, (req, res) => {\n    const new_rider = new Rider(req.body);\n    new_rider.save()\n        .then(rider => {\n            console.log({ message: `The rider was added successfully` })\n            res.status(200).json({ rider });\n        })\n        .catch(error => {\n            res.status(400).send({ message: `Unable to add the rider: ${error}` });\n        });\n});\n\napp.post(`/api/saccos`, (req, res) => {\n    console.log(req.body);\n    const new_sacco = new Sacco(req.body);\n    // if (!new_sacco._id) new_sacco._id = Schema.Types.ObjectId;\n    new_sacco.save()\n        .then(sacco => {\n            console.log({ message: `The sacco was added successfully` })\n            res.status(200).json({ sacco });\n        })\n        .catch(err => {\n            res.status(400).send({ message: `Unable to add the sacco: ${err}` });\n        });\n});\n\n/* GET ALL RIDERS */\napp.get('/api/riders', (req, res) => {\n    Rider.find().then(rider => {\n        if (!rider) res.status(404).json({ message: `No avilable Riders in the system` });\n        else res.json(rider);\n    })\n        .catch(error => {\n            console.log(error);\n            res.status(500).json({ message: `Internal Server Error: ${error}` });\n        });\n});\n\n/* GET SINGLE RIDER BY ID */\napp.get('api/riders/:id', (req, res) => {\n    let riders_id;\n    try {\n        riders_id = new ObjectId(req.params.id);\n    } catch (error) {\n        res.status(400).send({ message: `Invalid riders ID:${riders_id}` });\n    }\n    Rider.findById({ _id: riders_id }).then(rider => {\n        if (!rider) res.status(404).json({ message: `No such Rider: ${riders_id}` });\n        else res.json(rider);\n    })\n        .catch(error => {\n            console.log(error);\n            res.status(500).json({ message: `Internal Server Error: ${error}` });\n        }); 0\n});\n\n/* SAVE RIDERS */\napp.post('api/riders', (req, res) => {\n    let new_rider = req.body;\n    Rider.create(new_rider).then((result) => {\n        Rider.findById({ _id: result.insertedId }).then((added_rider => {\n            res.json(added_rider);\n        }))\n    }).catch(error => {\n        console.log(error);\n        res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\n/* UPDATE PRODUCT */\napp.put('api/riders/:id', (req, res) => {\n    let riders_id;\n    try {\n        riders_id = new ObjectId(req.params.id);\n    } catch (error) {\n        res.status(400).send({ message: `Invalid riders ID:${riders_id}` });\n    }\n    const new_rider = req.body;\n\n    Rider.findByIdAndUpdate({ _id: riders_id }, new_rider).find({ _id: riders_id }).then((updated_rider) => {\n        res.json(updated_rider)\n    }).catch((err) => {\n        console.log(err);\n        res.status(500).json({ message: `Unable to update the riders information ${err}` })\n\n    });\n});\n\n\n\n/* DELETE PRODUCT */\napp.delete('api/riders/:id', (req, res) => {\n    let riders_id;\n    try {\n        riders_id = new ObjectId(req.params.id);\n    } catch (error) {\n        res.status(400).send({ message: `Invalid riders ID:${riders_id}` });\n    }\n    // THE REQ.BODY IS OPTIONAL INTHE FINDBYIDANREMOVE METHOD\n    Rider.findByIdAndRemove({ _id: riders_id }, req.body).then((result) => {\n        res.json(result)\n    }).catch((err) => {\n        console.log({ message: `Unable to delelete the riders profile ${err}` })\n    });\n});\n\n\napp.get('/', (req, res) => {\n    res.json(`this is our first server page`);\n})\n\n\n//creating a connection to mongoose\n\n// mongoose.connect('mongodb://127.0.0.1:27017/fika-safe', { useNewUrlParser: true });\n// const connection = mongoose.connection;\n// connection.once('open', () => {\n//     console.log(`mongodb connected successfully`);\n// });\n\n// app.listen(3000, () => {\n//     console.log(\"Listen000ing on port 3000\")\n// });\n\nmongoose.connect('mongodb://127.0.0.1:27017/fika-safe', { useNewUrlParser: true })\n    .then(() => {\n        app.listen(3000, () => {\n            console.log(\"Listening on port 3000\")\n        })\n    })\n    .catch((err) => {\n        console.log(err.stack);\n    })\n\n\n\n\n// mongoose.connect('mongodb://localhost/fika-safe').then((client) => {\n//     db = client.db('fika-safe');\n\n//     // START THE SERVER\n//     app.listen(3000, () => {\n//         console.log(\"Listening on port 3001\")\n//     });\n// }).catch((err) => {\n//     console.log(err.stack);\n\n// });\n\n"],"file":"server.js"}